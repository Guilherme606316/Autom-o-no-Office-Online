// script.js - Dynamic Excel Add-in for Lista de pendencias and Insumos

// ==========================
// 1. DECLARAÇÃO DE FUNÇÕES AUXILIARES
// ==========================

// Adiciona campo ao formulário
function addField(id, labelText, type = "text", listId) {
  const container = document.getElementById("formContainer");
  const wrapper = document.createElement("div");
  wrapper.classList.add("form-group");
  const label = document.createElement("label");
  label.htmlFor = id;
  label.textContent = labelText;
  const input = document.createElement("input");
  input.id = id;
  input.type = type;
  if (listId) input.setAttribute("list", listId);
  wrapper.appendChild(label);
  wrapper.appendChild(input);
  if (listId) {
    const datalist = document.createElement("datalist");
    datalist.id = listId;
    wrapper.appendChild(datalist);
  }
  container.appendChild(wrapper);
}

// Cria botão de envio
function createButton(text) {
  const btn = document.createElement("button");
  btn.textContent = text;
  btn.id = "submitBtn";
  btn.addEventListener("click", submitForm);
  return btn;
}

// Popula <datalist> com sugestões
function populateList(listId, items) {
  const datalist = document.getElementById(listId);
  if (!datalist) return;
  datalist.innerHTML = "";
  items &&
    items.slice(0, 100).forEach((item) => {
      const option = document.createElement("option");
      option.value = item;
      datalist.appendChild(option);
    });
}

// Valida data ISO (YYYY-MM-DD)
function isValidDate(val) {
  const regex = /^\d{4}-\d{2}-\d{2}$/;
  if (!regex.test(val)) return false;
  const [y, m, d] = val.split("-").map(Number);
  const dt = new Date(y, m - 1, d);
  return dt.getFullYear() === y && dt.getMonth() === m - 1 && dt.getDate() === d;
}

// Busca valores de uma faixa em planilha
async function getRangeValues(context, sheetName, range) {
  const rng = context.workbook.worksheets.getItem(sheetName).getRange(range);
  rng.load("values");
  await context.sync();
  return rng.values.flat().filter((v) => v != null && v != "");
}

// Habilita navegação com setas entre inputs
function enableArrowNavigation(ids) {
  const inputs = ids.map((id) => document.getElementById(id)).filter((el) => el);
  inputs.forEach((el, idx) => {
    el.addEventListener("keydown", (e) => {
      let target;
      if (e.key === "ArrowDown") {
        target = inputs[idx + 1];
      } else if (e.key === "ArrowUp") {
        target = inputs[idx - 1];
      }
      if (target) {
        e.preventDefault();
        target.focus();
      }
    });
  });
}

// Função de envio de formulário: grava na planilha
async function submitForm() {
  await Excel.run(async (context) => {
    const sheet = context.workbook.worksheets.getActiveWorksheet();
    sheet.load("name");
    await context.sync();
    const name = sheet.name;
    // Coleta valores dos inputs
    const vals = {};
    document.querySelectorAll("#formContainer input").forEach((inp) => (vals[inp.id] = inp.value.trim()));
    // Define required e validação
    let required = [],
      row = [];
    
      required = ["qt", "un", "descricao", "os"];
      for (let f of required) if (!vals[f]) return console.error(`Campo ${f} vazio`);
      const q = parseInt(vals.qt, 10),
        o = parseInt(vals.os, 10);
      if (isNaN(q) || q <= 0) return console.error("QT inválida");
      if (isNaN(o) || o < 10000) {
        let msg = document.createElement("div");

        msg.textContent = "Aviso: valor não reconhecido, prosseguir assim mesmo?";
        msg.className = "form-msg warning";
      }
      if (!["SC", "LT", "RL", "UNID.", "CX", "M²", "M"].includes(vals.un)) return console.error("UNID inválida");
      row = [q, vals.un, vals.descricao, o, vals.data];
    
    // Próxima linha vazia
    const rangeA = sheet.getRange("A2:A1000");
    rangeA.load("values");
    await context.sync();
    let last = 1;
    rangeA.values.flat().forEach((v, i) => {
      if (v) last = i + 2;
    });
    const next = last + 1;
    // Escreve e limpa
    const endCol = String.fromCharCode(64 + row.length);
    sheet.getRange(`A${next}:${endCol}${next}`).values = [row];
    await context.sync();
    document.querySelectorAll("#formContainer input").forEach((inp) => (inp.value = ""));
    console.log("Gravado linha", next);
  });
}

// ==========================
// 2. EXECUÇÃO PRINCIPAL
// ==========================
async function main(context) {
  const sheet = context.workbook.worksheets.getActiveWorksheet();
  sheet.load("name");
  await context.sync();
  const name = sheet.name;

  const cont = document.getElementById("formContainer");
  cont.innerHTML = "";
  // Carrega sugestões
  let sug = {};

  sug.insumos = await getRangeValues(context, "Lista de insumos", "C3:C1000");
  addField("qt", "Quant.", "number");
  addField("un", "UNID.", "text");
  addField("descricao", "Descrição dos insumos", "text", "listDescricao");
  addField("os", "OS", "number");
  addField("data", "Data", "date");
  cont.appendChild(createButton("Enviar"));
  populateList("listDescricao", sug.insumos);
  enableArrowNavigation(["qt", "un", "descricao", "os", "data", "submitBtn"]);
  const sugestoes = document.getElementById("un");
  sugestoes.setAttribute("list", "sugestoes")
    
}

Office.onReady(() => {
  Excel.run(main).catch(console.error);
});
